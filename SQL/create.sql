/* 
 * File create.sql
 * Creates the schema of the database for the Makerspace Project Manager
 * Group members: 
 *    Remo Scolati:   remo_scolati@hotmail.com
 *    Mikel Grabocka: mgrabocka@unibz.it
 *    Matteo Nardini: mnardini@unibz.it
 */

-- Verify drop order

DROP TABLE IF EXISTS PURCHASE CASCADE;
DROP TABLE IF EXISTS BOOKING CASCADE;
DROP TABLE IF EXISTS PARTICIPATION CASCADE;
DROP TABLE IF EXISTS PROJECT CASCADE;
DROP TABLE IF EXISTS MAKERSPACE_USER CASCADE;
DROP TABLE IF EXISTS GENERAL_ROLE CASCADE;
DROP TABLE IF EXISTS FREE_INFRASTRUCTURE CASCADE;
DROP TABLE IF EXISTS TECHNICAL_INFRASTRUCTURE CASCADE;
DROP TABLE IF EXISTS REQUEST CASCADE;
DROP TABLE IF EXISTS MESSAGE CASCADE;
DROP TABLE IF EXISTS MATERIAL CASCADE;

CREATE TABLE PROJECT(
  project_id INTEGER PRIMARY KEY,
  title VARCHAR(50) NOT NULL,
  description VARCHAR(500),
  status VARCHAR(50) NOT NULL,
  seeking_collaboration BOOLEAN);

CREATE TABLE GENERAL_ROLE(
  role_id INTEGER PRIMARY KEY,
  name VARCHAR(50) NOT NULL,
  description VARCHAR(50));  

CREATE TABLE MAKERSPACE_USER(
  user_id INTEGER PRIMARY KEY,
  name VARCHAR(50) NOT NULL,
  user_role INTEGER NOT NULL,
  email VARCHAR(50) NOT NULL,
  FOREIGN KEY(user_role) REFERENCES GENERAL_ROLE(role_id)
	ON UPDATE CASCADE);

CREATE TABLE MATERIAL(
  material_id INTEGER PRIMARY KEY,
  name VARCHAR(50) NOT NULL,
  description VARCHAR(500),
  unitary_price DECIMAL(9,2) NOT NULL CHECK(unitary_price>=0),
  units INTEGER NOT NULL CHECK(units>=0));
  
CREATE TABLE FREE_INFRASTRUCTURE(
  free_infrastructure_id INTEGER PRIMARY KEY,
  name VARCHAR(50) NOT NULL);
  
CREATE TABLE TECHNICAL_INFRASTRUCTURE(
  technical_infrastructure_id INTEGER PRIMARY KEY,
  name VARCHAR(50) NOT NULL);
  
CREATE TABLE REQUEST(
  request_id INTEGER PRIMARY KEY,
  title VARCHAR(50) NOT NULL,
  project_id INTEGER NOT NULL,
  technical_infrastructure_id INTEGER NOT NULL,
  handled_by_user INTEGER NOT NULL,
  FOREIGN KEY(project_id) REFERENCES PROJECT(project_id)
	ON UPDATE CASCADE
	ON DELETE CASCADE,
  FOREIGN KEY(technical_infrastructure_id) REFERENCES TECHNICAL_INFRASTRUCTURE(technical_infrastructure_id)
	ON UPDATE CASCADE,
  FOREIGN KEY(handled_by_user) REFERENCES MAKERSPACE_USER(user_id)
	ON UPDATE CASCADE
	ON DELETE CASCADE);
  
CREATE TABLE MESSAGE(
  message_id INTEGER PRIMARY KEY,
  message_text TEXT,
  request_id INTEGER NOT NULL,
  FOREIGN KEY(request_id) REFERENCES REQUEST(request_id)
	ON UPDATE CASCADE
	ON DELETE CASCADE);

CREATE TABLE PARTICIPATION(
  project_id INTEGER REFERENCES PROJECT(project_id)
    ON UPDATE CASCADE
    ON DELETE CASCADE,
  user_id INTEGER REFERENCES MAKERSPACE_USER(user_id) 
    ON UPDATE CASCADE
    ON DELETE CASCADE,
  project_role VARCHAR(50) NOT NULL,
  PRIMARY KEY (project_id, user_id));

CREATE TABLE PURCHASE(
  purchase_id INTEGER PRIMARY KEY,
  project_id INTEGER REFERENCES PROJECT(project_id)
    ON UPDATE CASCADE
    ON DELETE CASCADE,
  material_id INTEGER REFERENCES MATERIAL(material_id)
    ON UPDATE CASCADE,
  units INTEGER NOT NULL CHECK(units>0));
  
CREATE TABLE BOOKING(
  booking_id INTEGER PRIMARY KEY,
  project_id INTEGER REFERENCES PROJECT(project_id) 
    ON UPDATE CASCADE
    ON DELETE CASCADE,
  free_infrastructure_id INTEGER REFERENCES FREE_INFRASTRUCTURE(free_infrastructure_id) 
    ON UPDATE CASCADE,
  start_time date NOT NULL,
  end_time date NOT NULL CHECK(end_time>start_time));

/* TO SUBSTITUTE WITH F.KEY IN USER -> GENERAL_ROLE(role_id)
CREATE TABLE USER_ROLE(
  user_id INTEGER REFERENCES MAKERSPACE_USER 
    ON UPDATE CASCADE
    ON DELETE CASCADE,
  role_id INTEGER REFERENCES GENERAL_ROLE
    ON UPDATE CASCADE
    ON DELETE CASCADE,
  PRIMARY KEY (user_id, role_id));

TO SUBSTITUTE WITH F.KEY IN REQUEST -> PROJECT(project_id)
CREATE TABLE MAKES_REQ(
  request_id INTEGER REFERENCES REQUEST 
    ON UPDATE CASCADE,
  project_id INTEGER REFERENCES PROJECT 
    ON UPDATE CASCADE,
  PRIMARY KEY (request_id, project_id));

TO SUBSTITUTE WITH F.KEY IN REQUEST -> TECH_INF(technical_infrastructure_id)
CREATE TABLE BOUND_TO(
  request_id INTEGER REFERENCES REQUEST 
    ON UPDATE CASCADE,
  technical_infrastructure_id INTEGER REFERENCES TECHNICAL_INFRASTRUCTURE 
    ON UPDATE CASCADE
    ON DELETE CASCADE,
  PRIMARY KEY (request_id, technical_infrastructure_id));
  
TO SUBSTITUTE WITH F.KEY IN MESSAGE -> REQUEST(request_id)
CREATE TABLE HAS_MESSAGE(
  request_id INTEGER REFERENCES REQUEST 
    ON UPDATE CASCADE,
  message_id INTEGER REFERENCES MESSAGE 
    ON UPDATE CASCADE,
  PRIMARY KEY (message_id, request_id));
  
TO SUBSTITUTE WITH F.KEY IN REQUEST -> USER(user_id)
CREATE TABLE HANDLES(
  user_id INTEGER REFERENCES MAKERSPACE_USER 
    ON UPDATE CASCADE
    ON DELETE CASCADE,
  request_id INTEGER REFERENCES REQUEST 
    ON UPDATE CASCADE,
  PRIMARY KEY (user_id, request_id));
*/