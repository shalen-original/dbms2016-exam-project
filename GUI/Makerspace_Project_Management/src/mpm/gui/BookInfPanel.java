/*
 * Makerspace Project Management
 * Database Systems 2016-2017
 * Copyright 2016 (C) Grabocka Mikel, Nardini Matteo, Scolati Remo.
 * All rights reserved.
 */
package mpm.gui;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import mpm.data.dao.* ;
import mpm.data.entities.*;

import java.util.Date;
import java.util.Calendar;
import java.util.List;
import java.util.TimeZone;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.SpinnerDateModel;
import javax.swing.plaf.basic.BasicComboBoxRenderer;
import javax.swing.table.DefaultTableModel;
import mpm.main.MPM;

/**
 *
 * @author Mikel
 */
public class BookInfPanel extends javax.swing.JPanel {

    /**
     * Creates new form BookInfPanel
     */
    public BookInfPanel() {
        initComponents();
        
        List<FreeInf> infs = DAOs.free_infs.getAvailable();
        infs.sort((a,b) -> {
            return a.getName().compareTo(b.getName());
        });
        
        DefaultComboBoxModel<FreeInf> m = new DefaultComboBoxModel<>();
        for(FreeInf fi: infs)
        {
            m.addElement(fi);
        }
        cmbFreeInf.setModel(m);
        cmbFreeInf.setRenderer((a, value, c, d, e) -> {
            BasicComboBoxRenderer w = (BasicComboBoxRenderer)(new BasicComboBoxRenderer())
                                            .getListCellRendererComponent(a,value,c,d,e);
            w.setText(value.getName());
            return w;
        });
        
        ((SpinnerDateModel)dtpTimeEnd.getModel()).setStart((Date)dtpTimeStart.getValue());
        reloadBookingTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        FreeInfLabel = new javax.swing.JLabel();
        StartLabel = new javax.swing.JLabel();
        EndLabel = new javax.swing.JLabel();
        BookButton = new javax.swing.JButton();
        Date date = new Date();
        SpinnerDateModel sm = new SpinnerDateModel(date,null,null,Calendar.MINUTE);
        dtpTimeStart = new javax.swing.JSpinner(sm);
        Date date1 = new Date();
        SpinnerDateModel sm1 = new SpinnerDateModel(date1,null,null,Calendar.MINUTE);
        dtpTimeEnd = new javax.swing.JSpinner(sm1);
        cmbFreeInf = new javax.swing.JComboBox<>();
        bookingTableScrollPane = new javax.swing.JScrollPane();
        bookingTable = new javax.swing.JTable();
        bookingHistoryLabel = new javax.swing.JLabel();

        FreeInfLabel.setText("Free Inf :");

        StartLabel.setText("Start time:");

        EndLabel.setText("End time:");

        BookButton.setText("Book");
        BookButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BookButtonActionPerformed(evt);
            }
        });

        JSpinner.DateEditor de = new JSpinner.DateEditor(dtpTimeStart, "E yyyy-MM-dd HH:mm");
        dtpTimeStart.setEditor(de);
        dtpTimeStart.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                dtpTimeStartStateChanged(evt);
            }
        });

        JSpinner.DateEditor de1 = new JSpinner.DateEditor(dtpTimeEnd, "E yyyy-MM-dd HH:mm");
        dtpTimeEnd.setEditor(de1);

        cmbFreeInf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbFreeInfActionPerformed(evt);
            }
        });

        bookingTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        bookingTableScrollPane.setViewportView(bookingTable);

        bookingHistoryLabel.setText("Booking History:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bookingHistoryLabel)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(BookButton)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(FreeInfLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(StartLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(EndLabel, javax.swing.GroupLayout.Alignment.LEADING))
                            .addGap(115, 115, 115)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(dtpTimeStart, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(cmbFreeInf, javax.swing.GroupLayout.Alignment.LEADING, 0, 203, Short.MAX_VALUE)
                                .addComponent(dtpTimeEnd)))
                        .addComponent(bookingTableScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 394, Short.MAX_VALUE)))
                .addContainerGap(71, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FreeInfLabel)
                    .addComponent(cmbFreeInf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(StartLabel)
                    .addComponent(dtpTimeStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(EndLabel)
                    .addComponent(dtpTimeEnd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(BookButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addComponent(bookingHistoryLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bookingTableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(48, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void BookButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BookButtonActionPerformed

        FreeInfBooking b = new FreeInfBooking(DAOs.bookings.getNextValidId());
        b.setFreeInfId(((FreeInf)cmbFreeInf.getSelectedItem()).getId());
        b.setProjectId(MPM.currentProject.getId());
        b.setStartTime(new Timestamp(((Date)dtpTimeStart.getValue()).getTime()));
        b.setEndTime(new Timestamp(((Date)dtpTimeEnd.getValue()).getTime()));
        
        List<FreeInfBooking> l = DAOs.bookings.findBookedInfBetween(b.getStartTime(), b.getEndTime());
        for (FreeInfBooking fib : l)
        {
            if (fib.getFreeInfId() == b.getFreeInfId())
            {
                JOptionPane.showMessageDialog(this, "The requested free infrastructure "
                        + "is already booked in the given time interval. \nPlease choose another time interval.", 
                        "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }    
        }
        
        try
        {
            DAOs.bookings.insert(b);
        }catch(RuntimeException ex){
            JOptionPane.showMessageDialog(this, "Oops, something went wrong. \n " + ex.getMessage(), 
                    "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        reloadBookingTable();
        JOptionPane.showMessageDialog(this, "Operation successful!");
        
    }//GEN-LAST:event_BookButtonActionPerformed

    private void dtpTimeStartStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_dtpTimeStartStateChanged
        
        Date start = (Date)dtpTimeStart.getValue();
        Date end = (Date)dtpTimeEnd.getValue();
        
        if (end.compareTo(start) < 0)
            dtpTimeEnd.setValue(dtpTimeStart.getValue());
        
        ((SpinnerDateModel)dtpTimeEnd.getModel()).setStart((Date)dtpTimeStart.getValue());
    }//GEN-LAST:event_dtpTimeStartStateChanged

    private void cmbFreeInfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbFreeInfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbFreeInfActionPerformed

    private void reloadBookingTable(){
        
        List<FreeInfBooking> bookingList = DAOs.bookings
                .findByProjectID(MPM.currentProject.getId());
                
        
        bookingTable = new javax.swing.JTable();
        bookingTable.setAutoCreateRowSorter(true);
                
        String[] bookingColumnNames = {"Infrastructure",
            "From",
            "Until"};
        
        bookingTableModel = new DefaultTableModel(
                0, bookingColumnNames.length);
        
        for(FreeInfBooking b : bookingList){
            Object[] o = new Object[3];
            o[0] = DAOs.free_infs.findByID(b.getFreeInfId()).getName();
            o[1] = b.getStartTime();
            o[2] = b.getEndTime();
                       
            bookingTableModel.addRow(o);

        }
        
        bookingTable.setModel(bookingTableModel);
        bookingTableModel.setColumnIdentifiers(bookingColumnNames);
        bookingTableScrollPane.setViewportView(bookingTable);
        bookingTable.setDefaultEditor(Object.class, null);
        
        
    }
    
    private DefaultTableModel bookingTableModel;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BookButton;
    private javax.swing.JLabel EndLabel;
    private javax.swing.JLabel FreeInfLabel;
    private javax.swing.JLabel StartLabel;
    private javax.swing.JLabel bookingHistoryLabel;
    private javax.swing.JTable bookingTable;
    private javax.swing.JScrollPane bookingTableScrollPane;
    private javax.swing.JComboBox<FreeInf> cmbFreeInf;
    private javax.swing.JSpinner dtpTimeEnd;
    private javax.swing.JSpinner dtpTimeStart;
    // End of variables declaration//GEN-END:variables
}
